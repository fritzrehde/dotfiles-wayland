# === Variables

# modifiers (switched with xkb)
set $mod_alt Mod4
set $mod_super Mod1

# tools
set $terminal $TERMINAL
set $browser $BROWSER

# home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# colors
include colors/colors.conf
set $color_grey #2e3440

# locations
set $scripts $XDG_CONFIG_HOME/sway/scripts

# outputs
set $laptop_display eDP-1


# === Looks

# gaps and border widths
gaps inner 1
default_border pixel 2
default_floating_border pixel 2

# gaps and borders are disabled for single containers
smart_gaps on
smart_borders on

# customize border colors
# class            border                  backgr.                 text        indicator               child_border
  client.focused   $color_border_focused   $color_border_focused   $color_grey $color_border_focused   $color_border_focused
  client.unfocused $color_border_unfocused $color_border_unfocused $color_grey $color_border_unfocused $color_border_unfocused


# === Output configuration

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

# TODO: replace with $XDG_CONFIG_HOME
# set wallpaper
output * bg ~/.config/wallpaper/wallpaper.jpg fill

# fractional scaling
output $laptop_display scale 1.2


# === Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
exec swayidle -w \
    timeout 600 "systemctl suspend" \
    before-sleep "waylock -fork-on-lock -init-color 0x000000 -input-color 0x000000"


# === Input configuration

# == Keyboards
# TODO: create xkb file and load (see man 5 sway-input)
input type:keyboard {
    xkb_variant "altgr-intl"
    xkb_options "caps:swapescape,altwin:swap_lalt_lwin"
    xkb_layout "us"
    repeat_delay 200
    repeat_rate 25
}

# == Pointers

# hide cursor after timeout
seat * hide_cursor 1500

# TODO: disable middle click pasting
# all pointers
input "type:pointer" {
    natural_scroll enabled
}

# all touchpads
input "type:touchpad" {
    pointer_accel 0.1
    natural_scroll enabled
    scroll_factor 0.5
    tap enabled
}

# thinkpad trackpoint
input "2:10:TPPS/2_IBM_TrackPoint" {
    scroll_factor 0.4
}

# logitech m720 triathlon mouse
# input "1133:45077:M720_Triathlon_Mouse" {
# }

# === Keybindings

# == Basics

# open terminal
bindsym $mod_alt+Return exec $terminal

# open browser
bindsym $mod_alt+Backspace exec $browser

# Kill focused window
bindsym $mod_alt+q kill

# Drag floating windows by holding down $mod_alt and left mouse button.
# Resize them with right mouse button + $mod_alt.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod_alt normal

# Reload the configuration file
bindsym $mod_alt+Shift+r reload

# Exit sway (logs you out of your Wayland session)
bindsym $mod_alt+Shift+e exit


# == Moving around

bindsym $mod_alt+Tab focus right

# TODO: achieve river behaviour: ratio +/- 10px
# change window size
bindsym $mod_alt+$left  resize grow left  10px
bindsym $mod_alt+$down  resize grow down  10px
bindsym $mod_alt+$up    resize grow up    10px
bindsym $mod_alt+$right resize grow right 10px
# bindsym $mod_alt+$left  resize grow left  10px, resize shrink right 10px
# bindsym $mod_alt+$down  resize grow down  10px, resize shrink up    10px
# bindsym $mod_alt+$up    resize grow up    10px, resize shrink down  10px
# bindsym $mod_alt+$right resize grow right 10px, resize shrink left  10px

# move/swap focused window in a direction
bindsym $mod_alt+Left move left
bindsym $mod_alt+Down move down
bindsym $mod_alt+Up move up
bindsym $mod_alt+Right move right

# move focus around
bindsym $mod_alt+Shift+$left focus left
bindsym $mod_alt+Shift+$down focus down
bindsym $mod_alt+Shift+$up focus up
bindsym $mod_alt+Shift+$right focus right


# == Workspaces

# switch to workspace
bindsym $mod_alt+1 workspace number 1
bindsym $mod_alt+2 workspace number 2
bindsym $mod_alt+3 workspace number 3
bindsym $mod_alt+4 workspace number 4
bindsym $mod_alt+5 workspace number 5
bindsym $mod_alt+6 workspace number 6
bindsym $mod_alt+7 workspace number 7
bindsym $mod_alt+8 workspace number 8
bindsym $mod_alt+9 workspace number 9
bindsym $mod_alt+0 workspace number 10

# move focused container to workspace
bindsym $mod_alt+Shift+1 move container to workspace number 1, workspace number 1
bindsym $mod_alt+Shift+2 move container to workspace number 2, workspace number 2
bindsym $mod_alt+Shift+3 move container to workspace number 3, workspace number 3
bindsym $mod_alt+Shift+4 move container to workspace number 4, workspace number 4
bindsym $mod_alt+Shift+5 move container to workspace number 5, workspace number 5
bindsym $mod_alt+Shift+6 move container to workspace number 6, workspace number 6
bindsym $mod_alt+Shift+7 move container to workspace number 7, workspace number 7
bindsym $mod_alt+Shift+8 move container to workspace number 8, workspace number 8
bindsym $mod_alt+Shift+9 move container to workspace number 9, workspace number 9
bindsym $mod_alt+Shift+0 move container to workspace number 10, workspace number 10


# == Layout stuff

# make focused window fullscreen
bindsym $mod_alt+f fullscreen

# You can "split" the current object of your focus with
# $mod_alt+b or $mod_alt+v, for horizontal and vertical splits
# respectively.
bindsym $mod_alt+b splith
bindsym $mod_alt+v splitv

# Switch the current container between different layout styles
# bindsym $mod_alt+s layout stacking
# bindsym $mod_alt+w layout tabbed
# bindsym $mod_alt+e layout toggle split

# Toggle the current focus between tiling and floating mode
# bindsym $mod_alt+Shift+space floating toggle

# Swap focus between the tiling area and the floating area
# bindsym $mod_alt+space focus mode_toggle

# Move focus to the parent container
# bindsym $mod_alt+a focus parent


# == Scratchpad

# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
# bindsym $mod_alt+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
# bindsym $mod_alt+minus scratchpad show


# TODO: use modes feature (very powerful feature)
# mode "custom_mode" {
# }
# bindsym $mod_alt+r modek"resize"


# == System controls

# change volume
bindsym XF86AudioRaiseVolume  exec 'change-volume.sh up'
bindsym XF86AudioLowerVolume  exec 'change-volume.sh down'
bindsym XF86AudioMute         exec 'change-volume.sh mute'
bindsym XF86AudioMicMute      exec 'change-volume.sh mic-mute'

# change screen brightness
bindsym XF86MonBrightnessUp   exec 'change-brightness.sh up'
bindsym XF86MonBrightnessDown exec 'change-brightness.sh down'

# close dunst notifications
bindsym $mod_alt+w       exec 'dunstctl close'
bindsym $mod_alt+Shift+w exec 'dunstctl close-all'

# take screenshot
bindsym $mod_super+Shift+3 exec 'screenshot.sh'
bindsym $mod_super+Shift+4 exec 'screenshot.sh select'

# control media player
# bindsym XF86AudioMedia exec 'playerctl play-pause'
# bindsym XF86AudioPlay  exec 'playerctl play-pause'
# bindsym XF86AudioPrev  exec 'playerctl previous'
# bindsym XF86AudioNext  exec 'playerctl next'

# turn on/off laptop display
bindsym XF86Favorites exec 'swaymsg output $laptop_display power toggle'


# == External Apps

# rofi
bindsym $mod_alt+Escape  exec 'rofi-power.sh'
# TODO: icons have low resolution
bindsym $mod_alt+d       exec 'rofi -show drun -theme ~/.config/rofi/themes/icons-$(theme.sh).rasi'
bindsym $mod_alt+s       exec 'rofi-scripts.sh'
bindsym $mod_alt+p       exec 'clipboard.sh rofi-paste'
bindsym $mod_alt+Shift+p exec 'clipboard.sh rofi-copy'

# play media from clipboard in mpv
bindsym $mod_alt+y        exec 'mpv.sh'
bindsym $mod_alt+Shift+y  exec 'mpv.sh background'


# === Status Bar

bar swaybar_command waybar


# === Criteria (rules)

set $tmp_ws t

# == Open specific applications in next empty workspace

# current hacky solution: open app in "$tmp_ws" workspace first, and then move to next empty
# ideal solution (invalid as "$()" not evaluated): for_window [app_id="mpv"] move container to workspace $($scripts/sway-next-empty-workspace.sh)


# mpv
assign     [app_id="mpv"] workspace $tmp_ws
for_window [app_id="mpv"] exec 'swaymsg [workspace=$tmp_ws] move container to workspace $($scripts/next-empty-workspace.sh)'

# zathura
assign     [app_id="zathura"] workspace $tmp_ws
for_window [app_id="zathura"] exec 'swaymsg [workspace=$tmp_ws] move container to workspace $($scripts/next-empty-workspace.sh)'


# === Start external apps

# clipboard
exec 'wl-paste --watch cliphist store'

# notifications
exec 'dunst'

# adjust color temperature
exec 'gammastep'

# open BROWSER and TERMINAL on startup
exec --no-startup-id swaymsg 'workspace 1; exec $browser; workspace 2; exec $terminal -e tmux-startup.sh'

# === Include other config files

include /etc/sway/config.d/*
